# Try upgrading conda C++ runtime to a newer release and rebuild the extension
import subprocess, sys, os
from pathlib import Path

repo_root = Path("/home/work/dcvc/dcvc_try_p").resolve()
py_rans_dir = repo_root / "src" / "cpp" / "py_rans"
cpp_dir = repo_root / "src" / "cpp"
out_so = cpp_dir / "MLCodec_extensions_cpp.so"
conda_env_lib = "/home/work/dcvc/miniconda3/envs/dcvc_rt_env_1/lib"

# 1) Force install specific newer versions (pick a 15.x release known to include GLIBCXX_3.4.30)
conda_cmd = "conda install -y -c conda-forge libstdcxx-ng=15.1.0 libgcc-ng=15.1.0 || true"
print("Running:", conda_cmd)
proc = subprocess.run(conda_cmd, shell=True, capture_output=True, text=True)
print("conda returncode:", proc.returncode)
print("--- conda stdout (truncated) ---")
print(proc.stdout[:2000])
print("--- conda stderr (truncated) ---")
print(proc.stderr[:2000])

# 2) Rebuild using g++ and embed rpath to conda_env_lib
import sysconfig, pybind11
py_inc = sysconfig.get_paths()["include"]
pybind_inc = pybind11.get_include()
sources = sorted([str(p) for p in py_rans_dir.glob("*.cpp")])
compiler = os.environ.get("CXX", "g++")
rpath_flag = f"-Wl,-rpath,{conda_env_lib}"
cflags = "-O3 -std=c++14 -fPIC -shared -Wl,-O1 -Wl,--as-needed"
include_flags = f"-I{py_inc} -I{pybind_inc} -I{py_rans_dir}"
cmd = f"{compiler} {cflags} {include_flags} {' '.join(sources)} -o {out_so} {rpath_flag}"
print("\nRebuild command:\n", cmd)
proc2 = subprocess.run(cmd, shell=True, cwd=str(cpp_dir), capture_output=True, text=True)
print("rebuild returncode:", proc2.returncode)
print("--- rebuild stdout ---")
print(proc2.stdout)
print("--- rebuild stderr ---")
print(proc2.stderr)

# 3) Force use of conda lib at runtime for this process
old_ld = os.environ.get("LD_LIBRARY_PATH", "")
os.environ["LD_LIBRARY_PATH"] = conda_env_lib + (":" + old_ld if old_ld else "")
print("\nLD_LIBRARY_PATH now starts with:", os.environ["LD_LIBRARY_PATH"].split(":")[0])

# 4) Try import and print ldd diagnostics if it fails
import importlib
if str(cpp_dir) not in sys.path:
    sys.path.insert(0, str(cpp_dir))
print("\nTrying to import MLCodec_extensions_cpp...")
try:
    m = importlib.import_module("MLCodec_extensions_cpp")
    print("Imported MLCodec_extensions_cpp ->", m)
    print("Success. You can now re-run your test script.")
except Exception as e:
    print("Import failed:", repr(e))
    if out_so.exists():
        print("\n--- ldd for built .so ---")
        ldd_proc = subprocess.run(f"ldd {out_so}", shell=True, capture_output=True, text=True)
        print(ldd_proc.stdout)
        print(ldd_proc.stderr)
    print("\nIf this still fails, please paste the import error + the ldd output above. Next options will be:")
    print("  A) try a different libstdcxx-ng version (e.g. 15.2.0 or 14.x) via conda,")
    print("  B) run the pipeline in Google Colab / another machine with modern GCC/CUDA, or")
    print("  C) use the pure-PyTorch fallback (but you'll need a Python-only entropy coder path â€” more invasive).")
