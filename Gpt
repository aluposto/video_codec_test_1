Got it — you must keep NumPy ≥ 1.20.0. That’s fine: the NumPy ABI problem we saw was caused by a mismatch (an extension module compiled for a different NumPy major/minor). The safe approach is to install a NumPy in the 1.x series (newer than 1.20) and reinstall OpenCV wheels that are built against that NumPy. In practice the stable choice is a recent 1.x release (e.g. 1.25.x) and a matching opencv-python-headless wheel.

Below are exact, copy-pasteable notebook/terminal commands and steps you can run in your Jupyter environment. They:

1. make sure you’re operating in the same Python env the notebook uses,


2. install a compatible NumPy (>=1.20 and <2),


3. reinstall OpenCV headless,


4. remove conflicting user-site installs, and


5. verify the imports — then ask you to restart the kernel.



If you prefer conda (recommended for stability), I include an optional conda path at the end.


---

A — Recommended notebook commands (run in a Jupyter cell)

Run each cell one by one.

1) Confirm which Python / env the notebook is using

# Python cell
import sys, os
print("sys.executable:", sys.executable)
print("Python version:", sys.version.replace("\n"," "))
import site
print("site.USER_SITE:", site.getusersitepackages())

If sys.executable points to the conda env / python you want to modify, proceed. If not, switch kernel to the intended env.


---

2) Uninstall any user-level OpenCV and conflicting packages

This removes both env-level and user-site OpenCV installs (safe to run).

# Shell cell
!pip uninstall -y opencv-python opencv-python-headless opencv-contrib-python || true
!python -m pip uninstall -y --user opencv-python opencv-python-headless opencv-contrib-python || true


---

3) Install a compatible NumPy (>=1.20, <2) and reinstall OpenCV headless

I'll pick NumPy 1.25.2 (recent 1.x release) — it satisfies >=1.20. If you prefer another 1.x (e.g. 1.24.x), substitute it.

# Shell cell
!pip install --upgrade pip setuptools wheel
!pip install --upgrade "numpy>=1.20,<2" "numpy==1.25.2"
# Install a headless opencv wheel built for the same ABI
!pip install --no-cache-dir --upgrade opencv-python-headless==4.7.0.72

Notes:

opencv-python-headless==4.7.0.72 is a widely-used wheel and generally compatible with NumPy 1.25.x.

If you need GUI (imshow), replace with opencv-python==4.7.0.72, but headless is recommended for server/notebook.



---

4) Verify installation (run in the same environment)

# Shell cell: quick import test
!python - <<'PY'
import sys
print("python:", sys.executable)
try:
    import numpy, cv2
    print("numpy:", numpy.__version__)
    print("cv2:", cv2.__version__)
    import numpy as np
    a = np.zeros((8,8,3), dtype=np.uint8)
    b = cv2.cvtColor(a, cv2.COLOR_BGR2RGB)
    print("cv2 basic op OK, output shape:", b.shape)
except Exception as e:
    print("Import or test failed:", repr(e))
PY

If that prints numpy and cv2 versions and cv2 basic op OK, you’re set.


---

5) Restart the notebook kernel

After these installs you must restart the kernel so Python loads the new native extensions.

In Jupyter UI: Kernel → Restart Kernel.

Or run the UI-recommended restart.


After restart, re-run the small verification cell (step 1) and then run the debug script (either via !python train/debug_model_io.py ... or import & call main() as we used earlier).


---

B — If you get dependency conflicts / pip refuses due to pinned packages

If pip complains about other packages requiring a different NumPy, prefer creating a clean conda environment (this avoids breaking other projects). Example conda workflow (run in a terminal, not inside Jupyter unless you create a new kernel):

conda create -n dcvc_env python=3.10 -y
conda activate dcvc_env
conda install -c conda-forge python=3.10 numpy=1.25 opencv ffmpeg -y
pip install -r requirements.txt  # install repo deps into this env
# then launch jupyterlab/notebook in this env or register kernel and select it in UI
python -m ipykernel install --user --name dcvc_env --display-name "dcvc_env"

Then in Jupyter, switch the kernel to dcvc_env.


---

C — If OpenCV still complains about ABI after the install

1. Ensure there are no stray OpenCV wheels in ~/.local/lib/python.../site-packages. Remove them if present; the earlier uninstall attempted that but manually check:



# Shell cell - check user site-packages for opencv
!python - <<'PY'
import site, os, glob
us = site.getusersitepackages()
print("USER_SITE:", us)
for p in (us,):
    if os.path.isdir(p):
        print("Found files in user site:", glob.glob(os.path.join(p, "cv2*"))[:10])
PY

Remove any leftovers and reinstall.

2. If the error mentions a compiled extension built with NumPy 1.x vs 2.x mismatch, ensure all binary extensions (not just OpenCV) are compatible. In practice using numpy<2 with 1.25.x resolves the common issue.




---

D — After success: run the debug script and paste outputs

Once cv2 imports fine in the verification step, re-run the debug script:

# Shell cell
!python train/debug_model_io.py --clip data/train_videos/game_A_level1_clip01.mp4 --device cuda --frames 5

Then paste the printed === Image model output === and === Video model output === sections here. I will modify train/train_video.py to match the exact keys (recon and likelihood names) your models actually return.


---

Final notes / safety

You asked to keep numpy >= 1.20.0 — all steps above satisfy that (we install 1.25.2). If you must keep a very specific version (e.g., numpy==1.22.0), substitute that in the pip install command — OpenCV wheel should still be compatible with most NumPy 1.x versions.

If you hit package conflicts you don’t want to resolve in-place, use the conda route and register that environment as a Jupyter kernel — that isolates changes.



---

Tell me when you’ve run the steps and restarted the kernel. If anything errors, paste the failing cell’s full output and I’ll give the exact next command. Once cv2 imports cleanly, run the debug script and paste the Image/Video output sections so I can patch the training script.

