Thanks — that traceback happened because the previous shell cell used a here-document (python - <<'PY') which doesn't work inside a Jupyter shell cell the same way. No problem — we'll fix this cleanly from inside the notebook.

Below are exact cells to run in your notebook (copy–paste each block into a cell and execute, in order). They:

1. set the notebook cwd to the repo root,


2. insert the repository src/ absolutely into sys.path,


3. verify importing src.models.image_model and src.models.video_model,


4. run the debug script's main() in-process (so you get the printed outputs here).



Run the cells one at a time and paste any error output if something fails.


---

Cell 1 — set working directory (adjust path if different)

# Cell 1 — set cwd to repo root (change path below if your repo is elsewhere)
import os
repo_root = "/home/work/dcvc/DCVC"   # <- edit this if your repo root differs
assert os.path.isdir(repo_root), f"Repo root not found: {repo_root}"
os.chdir(repo_root)
print("cwd now:", os.getcwd())
print("src exists:", os.path.isdir(os.path.join(repo_root, "src")))


---

Cell 2 — ensure absolute src is on sys.path

# Cell 2 — insert absolute src path into sys.path
import sys, os
repo_root = os.path.abspath(os.getcwd())
abs_src = os.path.join(repo_root, "src")
if not os.path.isdir(abs_src):
    raise RuntimeError(f"src folder not found at expected location: {abs_src}")
if abs_src not in sys.path:
    sys.path.insert(0, abs_src)
print("Inserted abs_src into sys.path:", abs_src in sys.path)
print("sys.path[0:6]:", sys.path[:6])


---

Cell 3 — test importing the model modules (quick check)

# Cell 3 — test import of model modules and print their file paths
import importlib, traceback
try:
    m_img = importlib.import_module('src.models.image_model')
    m_vid = importlib.import_module('src.models.video_model')
    print("Imported src.models.image_model from:", getattr(m_img, '__file__', 'no __file__'))
    print("Imported src.models.video_model from:", getattr(m_vid, '__file__', 'no __file__'))
except Exception:
    traceback.print_exc()
    raise

If this cell succeeds (prints file paths), proceed. If it raises, copy the traceback here.


---

Cell 4 — run the debug script in-process (recommended)

# Cell 4 — import and run debug script's main() in the same kernel
import importlib, sys, traceback
# ensure the train module is importable
try:
    debug_mod = importlib.import_module('train.debug_model_io')
    importlib.reload(debug_mod)
except Exception:
    print("Failed to import train.debug_model_io — traceback below:")
    traceback.print_exc()
    raise

# Run debug main with argv override
old_argv = sys.argv.copy()
sys.argv = ['train/debug_model_io.py', '--clip', 'data/train_videos/game_A_level1_clip01.mp4', '--device', 'cuda', '--frames', '5']
try:
    debug_mod.main()
except Exception:
    print("Exception while running debug_mod.main():")
    traceback.print_exc()
finally:
    sys.argv = old_argv


---

If you get errors

If Cell 3 fails to import src.models.image_model, paste that full traceback here.

If Cell 4 runs but prints the === Image model output === / === Video model output === sections, copy/paste those sections here and I will patch train/train_video.py to match the exact keys.

If debug_mod.main() errors during model instantiation with a TypeError about missing constructor args, paste the traceback — I’ll update the debug runner to call the models correctly.



---

Run those cells and paste the outputs (or the error tracebacks) here. I’ll take it from there and produce the exact edits needed for training.

