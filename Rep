Perfect — let’s wire that up so you can run test_video.py with the shim backend.


---

1. Check that you’re in the right directory

From terminal:

cd /home/work/dcvc/DCVC_fresh
ls test_video.py

Make sure test_video.py exists there.


---

2. Verify checkpoints & config

From repo root, check that the files you reference exist:

ls checkpoints/cvpr2025_image.pth.tar
ls checkpoints/cvpr2025_video.pth.tar
ls dataset_config_example_yuv420.json

If they don’t exist, you’ll need to download or adjust paths.


---

3. Run the command

From repo root (/home/work/dcvc/DCVC_fresh), with your conda env activated (dcvc_rt_env):

python test_video.py \
  --model_path_i ./checkpoints/cvpr2025_image.pth.tar \
  --model_path_p ./checkpoints/cvpr2025_video.pth.tar \
  --rate_num 4 \
  --test_config ./dataset_config_example_yuv420.json \
  --cuda 1 \
  -w 1 \
  --write_stream 1 \
  --force_zero_thres 0.12 \
  --output_path output.json \
  --force_intra_period -1 \
  --reset_interval 64 \
  --force_frame_num -1 \
  --check_existing 0 \
  --verbose 0


---

4. Expected behavior with shim

The run should proceed (no C++ build errors).

Caveat: The “bitstream” written will be from the shim (no real compression). So reported bitrate, PSNR/SSIM, etc. won’t reflect the true DCVC numbers.

But functionally: model loads, frames process, JSON results should be written to output.json.



---

✅ Next step for you:
Run the command above in your terminal, then paste here:

whether it started running (did you see progress output?),

and if it crashes, copy the traceback so I can patch the shim or the loader.


Do you want me to also prep a shorter “debug run” command (e.g., forcing it to only process 2–3 frames quickly) so you don’t need to wait for a full video pass?

