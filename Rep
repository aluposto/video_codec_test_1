# Patch simple shim to return int16 decoded tensor, reload and smoke-test
from pathlib import Path
import importlib, sys

root = Path(".").resolve()
file_path = root / "src" / "python" / "mlcodec_rans_py.py"

# Read current file to ensure we only modify the get_decoded_tensor dtype
txt = file_path.read_text()

# Replace the function that returns np.array(..., dtype=np.int8) to use int16
new_txt = txt.replace("return np.array(self._decoded, dtype=np.int8)", "return np.array(self._decoded, dtype=np.int16)")

file_path.write_text(new_txt)
print("Patched get_decoded_tensor -> int16 in", file_path)

# Unload stale modules
to_unload = [m for m in list(sys.modules.keys()) if m.startswith("src.python") or m in ("mlcodec_rans_py","codec_loader")]
for m in to_unload:
    sys.modules.pop(m, None)
print("Unloaded modules count:", len(to_unload))

# Reload loader and test
loader = importlib.import_module("src.python.codec_loader")
importlib.reload(loader)
print("Loader BACKEND:", loader.BACKEND)

# Smoke test
import numpy as np
pmf = [0.2,0.5,0.3]
cdf = loader.pmf_to_quantized_cdf(pmf, 12)
cdfs_arr = np.array([cdf], dtype=np.int32)
cdfs_sizes = np.array([len(cdf)], dtype=np.int32)
offsets = np.array([0], dtype=np.int32)

enc = loader.RansEncoder()
idx = enc.add_cdf(cdfs_arr, cdfs_sizes, offsets)
enc.encode_y(np.array([ (0 & 0xff) | (1 << 8), (0 & 0xff) | (2 << 8) ], dtype=np.int16), idx)
enc.flush()
s = enc.get_encoded_stream()
print("simple encoded bytes:", list(np.asarray(s, dtype=np.uint8)))
dec = loader.RansDecoder()
dec.add_cdf(cdfs_arr, cdfs_sizes, offsets)
dec.set_stream(s)
dec.decode_y(np.array([0,0], dtype=np.uint8), idx)
print("decoded from simple fallback:", dec.get_decoded_tensor().tolist())
