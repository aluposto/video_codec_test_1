Got it üëç
Since you‚Äôre running inside Jupyter/IPython (no sudo, Python-only fallback), here are the clean instructions:


---

Step 1 ‚Äì Move to repo root

cd /home/work/dcvc/DCVC_fresh


---

Step 2 ‚Äì Make sure Python sees the repo

In your notebook, first cell:

import sys, os
# Add repo root so "src" can be imported
repo_root = "/home/work/dcvc/DCVC_fresh"
if repo_root not in sys.path:
    sys.path.insert(0, repo_root)
os.environ["PYTHONPATH"] = repo_root

print("PYTHONPATH set ->", os.environ["PYTHONPATH"])


---

Step 3 ‚Äì Run test_video with your arguments

In a new cell:

!python test_video.py \
  --model_path_i ./checkpoints/cvpr2025_image.pth.tar \
  --model_path_p ./checkpoints/cvpr2025_video.pth.tar \
  --rate_num 4 \
  --test_config ./dataset_config_example_yuv420.json \
  --cuda 1 \
  -w 1 \
  --write_stream 1 \
  --save_decoded_frame 1 \
  --force_zero_thres 0.12 \
  --output_path output.json \
  --force_intra_period -1 \
  --reset_interval 64 \
  --force_frame_num -1 \
  --check_existing 0 \
  --verbose 1


---

‚úÖ With this setup:

If compiled C++/CUDA modules are missing ‚Üí the loader falls back to Python backend (mlcodec_rans_py.py).

You should see Backend in use: py in the logs.

No sudo or distutils needed.



---

Do you want me to also give you a ‚Äúforce Python-only‚Äù switch (so it never even tries the C++/CUDA extension, skips the import attempt entirely)? That makes things 100% predictable.

