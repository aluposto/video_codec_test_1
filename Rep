Ah — the issue is just quoting inside the f-string. In a Jupyter cell, Python got confused by the backslashes. Let’s make it simple: write the little test script to a file, then run it with os.system (no messy escaping).

Please run these two cells:


---

Cell 1 — write the test script

test_code = """\
from src.models.video_model import DMC
import inspect
print("Imported DMC OK")
print("DMC.__init__ sig=", inspect.signature(DMC.__init__))
"""
with open("test_import_dmc.py", "w") as f:
    f.write(test_code)
print("Wrote test_import_dmc.py")


---

Cell 2 — run it with the same interpreter and PYTHONPATH

import sys, os
py = sys.executable
print("Running subprocess with:", py)
exit_code = os.system(f'PYTHONPATH=$PWD "{py}" test_import_dmc.py')
print("Exit code:", exit_code)


---

If it prints Imported DMC OK then the package import is working — at that point, you can re-run training using the same trick:

import sys, os
py = sys.executable
print("Running training with:", py)
os.system(f'PYTHONPATH=$PWD "{py}" training.py '
          '--train-glob "data/frames/train/**/*.png" '
          '--val-glob "data/frames/val/**/*.png" '
          '--patch-size 256 --temporal-len 4 --batch-size 6 '
          '--epochs 30 --cuda --amp '
          '--pretrained "./checkpoints/cvpr2025_video.pth.tar" '
          '--lambda-rd 0.01 '
          '--save-dir "./checkpoints_finetune_lambda0.01" '
          '--log-dir "./logs/dcvc_finetune_lambda0.01" '
          '--workers 4')

If it fails again, paste the entire output here. That will tell us if the issue is import path or the missing C++ extensions (e.g. MLCodec_extensions_cpp).

