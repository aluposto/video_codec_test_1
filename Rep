# Diagnostic: show rANS cum and cdf values at decode time
from src.python import codec_loader as loader
import numpy as np, pprint

# Build same test case
pmf = [0.2, 0.5, 0.3]
precision = 12
cdf = loader.pmf_to_quantized_cdf(pmf, precision)
cdfs_arr = np.array([cdf], dtype=np.int32)
cdfs_sizes = np.array([len(cdf)], dtype=np.int32)
offsets = np.array([0], dtype=np.int32)

enc = loader.RansEncoder()
idx = enc.add_cdf(cdfs_arr, cdfs_sizes, offsets)
symbols = np.array([ (0 & 0xff) | (1 << 8), (0 & 0xff) | (2 << 8) ], dtype=np.int16)
enc.encode_y(symbols, idx)
enc.flush()
stream = enc.get_encoded_stream()

print("Encoded stream bytes:", list(np.asarray(stream, dtype=np.uint8)))
print("Encoded stream len:", len(stream))

# Setup decoder and add same CDF
dec = loader.RansDecoder()
dec.add_cdf(cdfs_arr, cdfs_sizes, offsets)

# Access internal lib for introspection
_lib = dec._lib  # pure-Python fallback instance
print("Internal decoder lib type:", type(_lib))

# Set stream using the library method (this sets _lib._rans and _lib._ptr)
_lib.set_stream(stream)
print("_lib._rans (state):", _lib._rans)
print("_lib._ptr (pointer):", _lib._ptr)

# Show the cum value and compare to cdf range
cum = (_lib._rans & ((1 << 16) - 1))
print("cum (low bits):", cum)
first_group = _lib._cdfs[0] if _lib._cdfs else None
if first_group:
    print("len first_group:", len(first_group))
    print("first_group[0] sample (first 8):", first_group[0][:8])
    # find max cdf in the group (last value of each row)
    max_cdf = max(int(row[-1]) for row in first_group)
    print("max_cdf in first_group:", max_cdf)
    print("cum < max_cdf ?", cum < max_cdf)
else:
    print("No cdfs loaded in decoder internals yet (should not happen).")

# Also print the four possible byte-order interpretations of the 4 state bytes
b = list(np.asarray(stream, dtype=np.uint8))
n = len(b)
if n >= 4:
    first4 = b[:4]
    last4 = b[-4:]
    def le(bytes4):
        return bytes4[0] | (bytes4[1]<<8) | (bytes4[2]<<16) | (bytes4[3]<<24)
    print("first4:", first4, "->", le(first4))
    print("last4:", last4, "->", le(last4))
    print("first4 reversed:", list(reversed(first4)), "->", le(list(reversed(first4))))
    print("last4 reversed:", list(reversed(last4)), "->", le(list(reversed(last4))))
else:
    print("stream shorter than 4 bytes; unusual.")
